#!/usr/bin/env python
from rospy import init_node, signal_shutdown, Duration, loginfo
from actionlib import SimpleActionClient
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from sys import argv

"""
Plays back a recorded trajectory
example usage

./trajectory_player trajectory.txt

"""


class SrUrTrajectoryPlayer(object):

    def __init__(self):
        self.client = SimpleActionClient(
            'follow_joint_trajectory', FollowJointTrajectoryAction)
        self.trajectory_goal = FollowJointTrajectoryGoal()
        self.trajectory_goal.trajectory = JointTrajectory()
        self.trajectory_goal.trajectory.joint_names = ['ra_shoulder_pan_joint',
                                                       'ra_shoulder_lift_joint',
                                                       'ra_elbow_joint',
                                                       'ra_wrist_1_joint',
                                                       'ra_wrist_2_joint',
                                                       'ra_wrist_3_joint']
        self.velocities = [0] * 6

    def parse_trajectory(self):
        self.trajectory_goal.trajectory.points = []
        with open(argv[1]) as trajectory_text_file:
            if trajectory_text_file.read() != 'Work Space':
                logfatal("incompatible trajectory file")
                break
            for traj_point_text in trajectory_text_file:
                data = traj_point_text.split(',')
                time_from_start_ = Duration(float(data[0]))
                positions_ = [float(i) for i in data[1:]]
                self.trajectory_goal.trajectory.points.append(JointTrajectoryPoint(
                    positions=positions_, velocities=self.velocities, time_from_start=time_from_start_))

    def play_trajectory(self):
        self.client.send_goal(self.trajectory_goal)
        try:
            self.client.wait_for_result()
        except KeyboardInterrupt:
            self.client.cancel_goal()
            raise

    def run(self):
        try:
            init_node("TrajectoryPlayer", anonymous=True, disable_signals=True)
            loginfo("Waiting for server...")
            self.client.wait_for_server()
            loginfo("Connected to server. Reading trajectory")
            self.parse_trajectory()
            loginfo("Trajectory parsed. Start playing")
            self.play_trajectory()
        except (KeyboardInterrupt, SystemExit):
            signal_shutdown("KeyboardInterrupt")
            raise


if __name__ == '__main__':
    trajectroy_player = SrUrTrajectoryPlayer()
    trajectroy_player.run()
    loginfo("Completed trajectory")
